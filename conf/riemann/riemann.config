; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(let [expiry_seconds (or (System/getenv "RIEMANN_EXPIRY_INTERVAL_SECONDS") 5)]
    (periodically-expire expiry_seconds))

(def influxdb-baseconfig
  (let [
    dbhost (or (System/getenv "RIEMANN_INFLUXDB_DBHOST") "influxdb")
    dbport (or (System/getenv "RIEMANN_INFLUXDB_DBPORT") 8086)
    dbname (or (System/getenv "RIEMANN_INFLUXDB_DBNAME") "mydata")
    username (or (System/getenv "RIEMANN_INFLUXDB_USER") "root")
    password (or (System/getenv "RIEMANN_INFLUXDB_PASSWORD") "root")]
    {
      :version :0.9
      :host dbhost
      :port dbport
      :username username
      :password password
      :db dbname
    }))

(let [
  index (index)

  ; Inbound events will be passed to these streams:
  (streams
    (default {:ttl 60 :state "ok"}
      prn
      (batch 1 1
        (influxdb
          (merge influxdb-baseconfig {:series (fn [opts] name)})
        )  
      )

      ;(io (influxdb influxdb-baseconfig))
      
      ; Index all events without any transformation
      (tap :test-index index)
    )
  )
)
